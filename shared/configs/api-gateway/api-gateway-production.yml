server:
  port: 8080
  netty:
    connection-timeout: 2s
    initial-buffer-size: 128
  http2:
    enabled: true

spring:
  application:
    name: api-gateway

  config:
    import: optional:configserver:${CONFIG_SERVER_URL}

  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
          lower-case-service-id: true
      routes:
        - id: user-service-auth
          uri: lb://user-service
          predicates:
            - Path=/api/v1/auth/**
          filters:
            - name: CircuitBreaker
              args:
                name: user-service-auth
                fallbackUri: forward:/fallback/user
            - name: RequestRateLimiter
              args:
                key-resolver: "#{@userKeyResolver}"
                redis-rate-limiter.replenishRate: 50
                redis-rate-limiter.burstCapacity: 100
        - id: user-service-rest
          uri: lb://user-service
          predicates:
            - Path=/api/v1/rest/users/**
          filters:
            - name: CircuitBreaker
              args:
                name: user-service-rest
                fallbackUri: forward:/fallback/user
            - name: RequestRateLimiter
              args:
                key-resolver: "#{@userKeyResolver}"
                redis-rate-limiter.replenishRate: 100
                redis-rate-limiter.burstCapacity: 200
        - id: task-service-kotlin
          uri: lb://task-service-kotlin
          predicates:
            - Path=/api/v1/rest/tasks/**
          filters:
            - name: CircuitBreaker
              args:
                name: task-service-kotlin
                fallbackUri: forward:/fallback/task
            - name: RequestRateLimiter
              args:
                key-resolver: "#{@userKeyResolver}"
                redis-rate-limiter.replenishRate: 200
                redis-rate-limiter.burstCapacity: 400
        - id: notification-service
          uri: lb://notification-service
          predicates:
            - Path=/api/v1/notifications/**
          filters:
            - name: CircuitBreaker
              args:
                name: notification-service
                fallbackUri: forward:/fallback/notification
        - id: moderation-service
          uri: lb://moderation-service
          predicates:
            - Path=/api/v1/moderation/**
          filters:
            - name: CircuitBreaker
              args:
                name: moderation-service
                fallbackUri: forward:/fallback/moderation
      default-filters:
        - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
        - AddRequestHeader=X-Request-Source, api-gateway
        - AddResponseHeader=X-Response-Time, #{T(System).currentTimeMillis()}
      globalcors:
        cors-configurations:
          '[/**]':
            allowedOrigins: ${ALLOWED_ORIGINS}
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - PATCH
              - OPTIONS
            allowedHeaders: "*"
            allowCredentials: true
            maxAge: 3600

eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_URL}
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 10
    lease-expiration-duration-in-seconds: 30

# Production circuit breaker configuration
resilience4j:
  circuitbreaker:
    instances:
      user-service-auth:
        registerHealthIndicator: true
        slidingWindowSize: 20
        minimumNumberOfCalls: 10
        permittedNumberOfCallsInHalfOpenState: 5
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 10s
        failureRateThreshold: 60
        eventConsumerBufferSize: 20
        slowCallRateThreshold: 80
        slowCallDurationThreshold: 3s
      user-service-rest:
        registerHealthIndicator: true
        slidingWindowSize: 20
        minimumNumberOfCalls: 10
        permittedNumberOfCallsInHalfOpenState: 5
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 10s
        failureRateThreshold: 60
        eventConsumerBufferSize: 20
        slowCallRateThreshold: 80
        slowCallDurationThreshold: 3s
      task-service-kotlin:
        registerHealthIndicator: true
        slidingWindowSize: 20
        minimumNumberOfCalls: 10
        permittedNumberOfCallsInHalfOpenState: 5
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 10s
        failureRateThreshold: 60
        eventConsumerBufferSize: 20
        slowCallRateThreshold: 80
        slowCallDurationThreshold: 3s

# Redis configuration for rate limiting
spring:
  redis:
    host: ${REDIS_HOST}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:}
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 8
        max-idle: 8
        min-idle: 0

# Production logging
logging:
  level:
    org.springframework.cloud.gateway: WARN
    org.springframework.web.reactive: WARN
    org.springframework.cloud.loadbalancer: WARN
    com.netflix.eureka: WARN
    reactor.netty: WARN
    com.home: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%logger{36}] [%X{traceId:-},%X{spanId:-}] - %msg%n"
  file:
    name: /var/log/api-gateway/application.log
    max-size: 100MB
    max-history: 30

# Production management endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,gateway
  endpoint:
    health:
      show-details: never
    gateway:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
  health:
    circuitbreakers:
      enabled: true

# Security
server:
  error:
    include-message: never
    include-binding-errors: never
    include-stacktrace: never 