server:
  port: 8082

spring:
  application:
    name: event-service

  config:
    import: optional:configserver:http://config-server:8888

  # Database configuration for Docker
  datasource:
    url: jdbc:postgresql://postgres:5432/eventdb
    username: event_user
    password: event_password
    driver-class-name: org.postgresql.Driver
    hikari:
      connection-timeout: 30000
      maximum-pool-size: 10
      minimum-idle: 5
      idle-timeout: 300000

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
    open-in-view: false

  # Kafka configuration for Docker
  kafka:
    bootstrap-servers: kafka:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      properties:
        schema.registry.url: http://schema-registry:8081
        auto.register.schemas: false
        use.latest.version: true
      acks: all
      retries: 3

eureka:
  client:
    service-url:
      defaultZone: http://discovery-server:8761/eureka
  instance:
    prefer-ip-address: true
    hostname: event-service

# Application configuration for Docker
event-platform:
  activity:
    max-page-size: 100
    default-page-size: 20
  cache:
    ttl: 300
    max-entries: 1000

# Logging for Docker
logging:
  level:
    com.home: INFO
    org.springframework.kafka: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%logger{36}] [%X{traceId:-},%X{spanId:-}] - %msg%n"

# Management endpoints for Docker
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true 