server:
  port: 8084

spring:
  application:
    name: notification-service

  cloud:
    config:
      import: optional:configserver:http://localhost:8888

  # Database configuration for notification audit logs
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/notificationdb}
    username: ${DATABASE_USERNAME:notification_user}
    password: ${DATABASE_PASSWORD:notification_password}
    driver-class-name: org.postgresql.Driver
    hikari:
      connection-timeout: 20000
      maximum-pool-size: 8
      minimum-idle: 4
      idle-timeout: 300000

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    open-in-view: false

  # Kafka configuration
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: notification-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      properties:
        schema.registry.url: ${SCHEMA_REGISTRY_URL:http://localhost:8081}
        specific.avro.reader: true
        auto.register.schemas: false
        use.latest.version: true
      enable-auto-commit: false
    listener:
      ack-mode: MANUAL_IMMEDIATE
      concurrency: 3

  # Mail configuration
  mail:
    host: ${MAIL_HOST:smtp.gmail.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
          connection-timeout: 5000
          timeout: 5000
          write-timeout: 5000
    test-connection: true

eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_URL:http://localhost:8761/eureka/}
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 10
    lease-expiration-duration-in-seconds: 30

# Application-specific configuration
notification:
  email:
    from: ${NOTIFICATION_FROM_EMAIL:noreply@eventplatform.com}
    template-path: classpath:/templates/email/
    retry-attempts: 3
    retry-delay: 2000
    batch-size: 50
  async:
    core-pool-size: 5
    max-pool-size: 10
    queue-capacity: 500
  rate-limit:
    enabled: true
    max-emails-per-minute: 100
    max-emails-per-hour: 1000

# Logging configuration
logging:
  level:
    com.home: INFO
    org.springframework.kafka: WARN
    org.springframework.mail: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%logger{36}] [%X{traceId:-},%X{spanId:-}] - %msg%n"

# Management endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when-authorized
  metrics:
    export:
      prometheus:
        enabled: true
  health:
    mail:
      enabled: true
