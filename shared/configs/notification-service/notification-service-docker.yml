server:
  port: 8084

spring:
  application:
    name: notification-service

  config:
    import: optional:configserver:http://config-server:8888

  # Database configuration for Docker
  datasource:
    url: jdbc:postgresql://postgres:5432/notificationdb
    username: notification_user
    password: notification_password
    driver-class-name: org.postgresql.Driver
    hikari:
      connection-timeout: 30000
      maximum-pool-size: 15
      minimum-idle: 5
      idle-timeout: 300000

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
    open-in-view: false

  # Kafka configuration for Docker
  kafka:
    bootstrap-servers: kafka:9092
    consumer:
      group-id: notification-group-docker
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      properties:
        schema.registry.url: http://schema-registry:8081
        specific.avro.reader: true
        auto.register.schemas: false
        use.latest.version: true
      enable-auto-commit: false
    listener:
      ack-mode: MANUAL_IMMEDIATE
      concurrency: 3

  # Mail configuration for Docker
  mail:
    host: ${MAIL_HOST:mailhog}
    port: ${MAIL_PORT:1025}
    username: ${MAIL_USERNAME:}
    password: ${MAIL_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: false
          starttls:
            enable: false
    test-connection: false

eureka:
  client:
    service-url:
      defaultZone: http://discovery-server:8761/eureka
  instance:
    prefer-ip-address: true
    hostname: notification-service

# Application configuration for Docker
notification:
  email:
    from: noreply@eventplatform.docker
    template-path: classpath:/templates/email/
    retry-attempts: 3
    retry-delay: 2000
    batch-size: 50
  async:
    core-pool-size: 3
    max-pool-size: 8
    queue-capacity: 200

# Logging for Docker
logging:
  level:
    com.home: INFO
    org.springframework.kafka: INFO
    org.springframework.mail: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%logger{36}] [%X{traceId:-},%X{spanId:-}] - %msg%n"

# Management endpoints for Docker
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true 